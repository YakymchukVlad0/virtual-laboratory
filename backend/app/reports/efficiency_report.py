from fpdf import FPDF

# Вихідний текст
text = """
Оцінка складності (0-10): 6

2. Статистика:
   - Кількість циклів: 1
   - Кількість умов: 3
   - Кількість дублювань: 1 (дві функції з однаковою назвою)
   - Кількість зайвих операторів: 0

3. Примітка:
   - Функція `calculate_factorial` дублюється, що є серйозним недоліком. Це може призвести до плутанини та помилок у коді.
   - В обох реалізаціях є умови для обробки базового випадку (коли `n` дорівнює 0 або 1), але вони реалізовані по-різному.
   - Перша функція використовує ітеративний підхід, а друга - рекурсивний. Рекурсивний підхід може призвести до переповнення стеку для великих значень `n`.

4. Загальний коментар:
   - Код потребує оптимізації та очищення. Рекомендується вибрати одну реалізацію функції `calculate_factorial`, щоб уникнути дублювання. Ітеративний підхід зазвичай є більш ефективним для обчислення факторіалів, оскільки
"""

# Розділення тексту на блоки
blocks = text.strip().split('\n\n')

# Створення об'єкта PDF
pdf = FPDF()
pdf.set_auto_page_break(auto=True, margin=15)
pdf.add_page()

# Додавання власного шрифта
# Замість 'MyCustomFont.ttf' вкажіть шлях до вашого шрифта
# Для підтримки Unicode потрібно вказати `uni=True`
pdf.add_font('MyCustomFont', '', 'app/reports/kabi.ttf', uni=True)

# Встановлення шрифта для використання
pdf.set_font('MyCustomFont', '', 12)

# Додавання результатів до PDF
pdf.cell(200, 10, txt=f"Оцінка складності: {blocks[0].split(': ')[1]}", ln=True)

pdf.ln(10)
pdf.cell(200, 10, txt="Статистика:", ln=True)
for line in blocks[1].split('\n')[1:]:
    pdf.cell(200, 10, txt=line.strip(), ln=True)

pdf.ln(10)
pdf.cell(200, 10, txt="Примітка:", ln=True)
for line in blocks[2].split('\n')[1:]:
    pdf.cell(200, 10, txt=line.strip(), ln=True)

pdf.ln(10)
pdf.cell(200, 10, txt="Загальний коментар:", ln=True)
pdf.cell(200, 10, txt=blocks[3].split('\n')[1].strip(), ln=True)

# Збереження PDF
pdf.output("output.pdf")

print("PDF файл успішно створено.")
